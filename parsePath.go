
//line parsePath.rl:1
// anypath is an navigator through any object
/*
┌───────────────────────────────────────────────────────────┐
│                                                           │
│ Do not edit! The file was autogenerated from parsePath.rl │
│ by command: ragel -Z -G2 parsePath.rl -o parsePath.go     │
│                                                           │
└───────────────────────────────────────────────────────────┘
*/

package anypath

import (
	"fmt"
	"strconv"
)

func parsePath(path string) ([]any, error) {

	data := path + string(rune(0))
	cs, p, pe := 0, 0, len(data)
	eof := pe 
	ts, te := 0, 0
	found := make([]any, 16) // 16 is enough for ANY cases
	foundIndex := -1

	pushFound := func (e any) {
		foundIndex++

		if foundIndex >= len(found) {
			nfound := make([]any, len(found) + 16)
			copy(nfound, found)
			found = nfound
		}

		found[foundIndex] = e
	}

	
//line parsePath.go:35
const anypath_start int = 1
const anypath_first_final int = 8
const anypath_error int = 0

const anypath_en_anypath int = 1


//line parsePath.go:43
	{
	cs = anypath_start
	}

//line parsePath.go:48
	{
	if p == pe {
		goto _test_eof
	}
	switch cs {
	case 1:
		goto st_case_1
	case 8:
		goto st_case_8
	case 0:
		goto st_case_0
	case 2:
		goto st_case_2
	case 3:
		goto st_case_3
	case 4:
		goto st_case_4
	case 5:
		goto st_case_5
	case 6:
		goto st_case_6
	case 7:
		goto st_case_7
	}
	goto st_out
	st_case_1:
		switch data[p] {
		case 0:
			goto st8
		case 32:
			goto tr2
		case 46:
			goto st3
		case 91:
			goto st4
		case 93:
			goto tr2
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr2
		}
		goto tr1
tr5:
//line parsePath.rl:44

				te = p
			   	pushFound(string(data[ts:te]))
 			
	goto st8
tr13:
//line parsePath.rl:50
{
				index, err := strconv.ParseInt(string(data[ts:te]), 10, 32)
				if err != nil {
					return nil, err
				}
				pushFound(int(index))
			}
	goto st8
	st8:
		if p++; p == pe {
			goto _test_eof8
		}
	st_case_8:
//line parsePath.go:113
		goto tr2
tr2:
//line parsePath.rl:62

				if p == eof - 1 {
					return nil, fmt.Errorf("Unexpected EOF at pos=%d", p+1)
				}

				return nil, fmt.Errorf("Unexpected symbol '%c' at pos %d", data[p], p+1)
			
	goto st0
//line parsePath.go:125
st_case_0:
	st0:
		cs = 0
		goto _out
tr1:
//line parsePath.rl:43
 ts, te = p, 0 
	goto st2
	st2:
		if p++; p == pe {
			goto _test_eof2
		}
	st_case_2:
//line parsePath.go:139
		switch data[p] {
		case 0:
			goto tr5
		case 32:
			goto tr2
		case 46:
			goto tr7
		case 91:
			goto tr8
		case 93:
			goto tr2
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr2
		}
		goto st2
tr7:
//line parsePath.rl:44

				te = p
			   	pushFound(string(data[ts:te]))
 			
	goto st3
tr14:
//line parsePath.rl:50
{
				index, err := strconv.ParseInt(string(data[ts:te]), 10, 32)
				if err != nil {
					return nil, err
				}
				pushFound(int(index))
			}
	goto st3
	st3:
		if p++; p == pe {
			goto _test_eof3
		}
	st_case_3:
//line parsePath.go:178
		switch data[p] {
		case 0:
			goto tr2
		case 32:
			goto tr2
		case 46:
			goto tr2
		case 91:
			goto tr2
		case 93:
			goto tr2
		}
		if 9 <= data[p] && data[p] <= 13 {
			goto tr2
		}
		goto tr1
tr8:
//line parsePath.rl:44

				te = p
			   	pushFound(string(data[ts:te]))
 			
	goto st4
tr15:
//line parsePath.rl:50
{
				index, err := strconv.ParseInt(string(data[ts:te]), 10, 32)
				if err != nil {
					return nil, err
				}
				pushFound(int(index))
			}
	goto st4
	st4:
		if p++; p == pe {
			goto _test_eof4
		}
	st_case_4:
//line parsePath.go:217
		if data[p] == 45 {
			goto tr9
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto tr10
		}
		goto tr2
tr9:
//line parsePath.rl:38
 ts, te = p, 0 
	goto st5
	st5:
		if p++; p == pe {
			goto _test_eof5
		}
	st_case_5:
//line parsePath.go:234
		if 48 <= data[p] && data[p] <= 57 {
			goto st6
		}
		goto tr2
tr10:
//line parsePath.rl:38
 ts, te = p, 0 
	goto st6
	st6:
		if p++; p == pe {
			goto _test_eof6
		}
	st_case_6:
//line parsePath.go:248
		if data[p] == 93 {
			goto tr12
		}
		if 48 <= data[p] && data[p] <= 57 {
			goto st6
		}
		goto tr2
tr12:
//line parsePath.rl:39
 te = p 
	goto st7
	st7:
		if p++; p == pe {
			goto _test_eof7
		}
	st_case_7:
//line parsePath.go:265
		switch data[p] {
		case 0:
			goto tr13
		case 46:
			goto tr14
		case 91:
			goto tr15
		}
		goto tr2
	st_out:
	_test_eof8: cs = 8; goto _test_eof
	_test_eof2: cs = 2; goto _test_eof
	_test_eof3: cs = 3; goto _test_eof
	_test_eof4: cs = 4; goto _test_eof
	_test_eof5: cs = 5; goto _test_eof
	_test_eof6: cs = 6; goto _test_eof
	_test_eof7: cs = 7; goto _test_eof

	_test_eof: {}
	if p == eof {
		switch cs {
		case 1, 2, 3, 4, 5, 6, 7:
//line parsePath.rl:62

				if p == eof - 1 {
					return nil, fmt.Errorf("Unexpected EOF at pos=%d", p+1)
				}

				return nil, fmt.Errorf("Unexpected symbol '%c' at pos %d", data[p], p+1)
			
//line parsePath.go:296
		}
	}

	_out: {}
	}

//line parsePath.rl:75



	return found[:foundIndex + 1], nil
}


